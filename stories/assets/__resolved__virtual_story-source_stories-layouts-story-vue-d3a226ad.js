const __resolved__virtual_storySource_storiesLayoutsStoryVue = '<template>\n  <Story title="Layouts">\n    <a @click="doLayout">\n      Tree layout\n    </a>\n    <diagram v-if="displayed" :model="model" height="700" />\n  </Story>\n</template>\n<script>\nimport Diagram from "../src/components/Diagram.vue";\nexport default {\n  components: {\n    Diagram,\n  },\n  data() {\n    const diagramModel = new Diagram.Model();\n\n    const node1 = diagramModel.addNode("test2", 300, 200);\n    const node1IP = node1.addInPort("in");\n\n    const node2 = diagramModel.addNode("test", 10, 300, 144, 80);\n    const node2OP = node2.addOutPort("out");\n    const node2IP = node2.addInPort("in");\n\n    const node3 = diagramModel.addNode("test3", 100, 100, 72, 100);\n    const node3OP = node3.addOutPort("out");\n    const node3IP = node3.addInPort("in");\n\n    const node4 = diagramModel.addNode("test4", 100, 350, 72, 100);\n    const node4OP = node4.addOutPort("out");\n    const node4IP = node4.addInPort("in");\n\n    const node5 = diagramModel.addNode("test5", 200, 350, 72, 100);\n    const node5OP = node5.addOutPort("out");\n    const node5IP = node5.addInPort("in");\n\n    const node6 = diagramModel.addNode("test6", 200, 350, 72, 100);\n    const node6OP = node6.addOutPort("out");\n    const node6IP = node6.addInPort("in");\n\n    const node7 = diagramModel.addNode("test7", 200, 350, 72, 100);\n    const node7OP = node7.addOutPort("out");\n    const node7IP = node7.addInPort("in");\n\n    const node8 = diagramModel.addNode("test8", 200, 350, 72, 100);\n    const node8OP = node8.addOutPort("out");\n    const node8IP = node8.addInPort("in");\n\n\n    diagramModel.addLink(node2OP, node3IP);\n    diagramModel.addLink(node2OP, node4IP);\n    diagramModel.addLink(node3OP, node1IP);\n    diagramModel.addLink(node2OP, node5IP);\n    diagramModel.addLink(node5OP, node6IP);\n\n    diagramModel.addLink(node3OP, node7IP);\n    diagramModel.addLink(node3OP, node8IP);\n\n\n\n    return {\n      displayed: true,\n      model: diagramModel\n    };\n  },\n  methods: {\n    doLayout() {\n    function treeLayout(model) {\n      const nodes = model.nodes;\n      const links = model.links;\n\n      // Find the root node\n      let rootNode = null;\n      for (let i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n        let isRootNode = true;\n\n        for (let j = 0; j < links.length; j++) {\n          const link = links[j];\n\n          if (link.to === node.ports[0].id) {\n            isRootNode = false;\n            break;\n          }\n        }\n\n        if (isRootNode) {\n          rootNode = node;\n          break;\n        }\n      }\n\n      // Set the position of the root node\n      rootNode.x = 0;\n      rootNode.y = 0;\n\n      // Recursively set the position of child nodes\n      const setChildNodePosition = (parentNode, y) => {\n        let lastChildYByNode = {};\n        for (let i = 0; i < links.length; i++) {\n          const link = links[i];\n          if (link.from === parentNode.ports[0].id) {\n            const childNode = nodes.find((node) => {\n              return node.ports.some((port) => port.id === link.to);\n            });\n            if (childNode) {\n              const fromPort = parentNode.ports.find((port) => port.id === link.from);\n              const toPort = childNode.ports.find((port) => port.id === link.to);\n              const portY =\n                parentNode.y +\n                parentNode.height / 2 +\n                childNode.height / 2;\n              if (!lastChildYByNode[parentNode.id]) {\n                lastChildYByNode[parentNode.id] = parentNode.y;\n              }\n              childNode.x = parentNode.x + parentNode.width + 40;\n              childNode.y = lastChildYByNode[parentNode.id];\n              lastChildYByNode[parentNode.id] += childNode.height + 20;\n              setChildNodePosition(childNode, childNode.y);\n            }\n          }\n        }\n      };\n\n      setChildNodePosition(rootNode, 0);\n    }\n\n    this.displayed = false;\n    this.$nextTick(() => {\n      treeLayout(this.model._model);\n      this.$nextTick(() => {\n        this.displayed = true;\n      })\n    })\n    },\n  }\n};\n\n<\/script>\n';
export {
  __resolved__virtual_storySource_storiesLayoutsStoryVue as default
};
